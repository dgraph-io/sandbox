type Farm {
    id: ID!
    name: String! @search(by: [fulltext])
    owner: String!
    location: Location
    capacity: Capacity
    number_of_turbines: Int
    annual_energy_production: String
    status: String
    turbines: [Turbine!] @hasInverse(field: installed_at)
}

type Turbine @auth(
    query: {
      rule: """
        query ($groups: [String]!) {
            queryTurbine(filter: { accessGroup: { in: $groups } }) {
                id
            }
        }
      """
    }
    update: {
      rule: """
        query ($groups: [String]!) {
            queryTurbine(filter: { accessGroup: { in: $groups } }) {
                id
            }
        }
      """
    }
  ) {
    id: String! @id
    manufacturer: String
    model: String    
    rated_power: String
    capacity: Capacity
    rotor_diameter: String
    hub_height: String
    blade_length: String
    number_of_blades: Int
    rated_wind_speed: String
    cut_in_wind_speed: String
    cut_out_wind_speed: String
    installed_at: Farm

    "Group that is allowed access to this turbine"
    accessGroup: String @search(by: [hash])
}

type Location {
    latitude: String
    longitude: String
    city: String
    country: String
    state: String
}

type Capacity {
    id: ID
    rated_power: Float
    total: Float
    unit: String
}

# Note the VerificationKey below should never be used elsewhere. It was randomly generated for this demo.
# Dgraph.Authorization {"VerificationKey":"vDK59uv+QxbuRpwdcFyYdTlLahaFDG0g2rf7+pc+jkk=","Header":"X-myapp","Namespace":"https://myapp.com/jwt/claims","Algo":"HS256","Audience":["myapp"]}
